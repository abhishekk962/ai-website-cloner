from google import genai
from google.genai import types
from app.core.config import settings
import re
import aiohttp


async def stream_html_from_image(image_path: str):
    """
    Given an image URL or path, streams the HTML code generated by Gemini for that image.
    Yields HTML code chunks as they are received (may be incomplete).
    """
    async with aiohttp.ClientSession() as session:
        async with session.get(image_path) as resp:
            image_bytes = await resp.read()
    image = types.Part.from_bytes(
        data=image_bytes, mime_type="image/png"
    )

    client = genai.Client(api_key=settings.gemini_api_key)
    response = client.models.generate_content_stream(
        model="gemini-2.5-flash-preview-05-20",
        contents=["Give me HTML code to exactly replicate this image. No descriptions just the code.", image],
    )
    for chunk in extract_html_chunks_from_stream(response):
        yield chunk


def extract_html_chunks_from_stream(chunks):
    """
    Given an iterable of text chunks, yield complete or incomplete HTML blocks as they are detected.
    This is a regular generator, not async.
    """
    buffer = ""
    for chunk in chunks:
        buffer += chunk.text if hasattr(chunk, 'text') else chunk
        match = re.search(r"(<html.*?>.*?)(</html>|$)", buffer, re.DOTALL)
        if match:
            yield match.group(1)
        else:
            yield ""
    yield match.group(1) if match else ""  # Yield any remaining buffer as the last chunk
    
